
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftTIMESDIVIDEBREAK CASE CHAR_LITERAL COLON COMMA DEFAULT DIVEQ DIVIDE ELSE EQ EQUALS FOR GE GT ID IF LBRACE LE LPAREN LT MINUS MINUSEQ NE NUMBER PLUS PLUSEQ RBRACE RPAREN SEMICOLON STRING_LITERAL SWITCH TIMES TIMESEQ TYPE WHILEprogram : stmt_liststmt_list : stmt stmt_liststmt_list : emptyempty :stmt : var_decl\n| assign_stmt\n| if_stmt\n| switch_stmt\n| while_stmt\n| for_stmt\n| break_stmtvar_decl : TYPE declarator_list SEMICOLONdeclarator_list : declaratordeclarator_list : declarator_list COMMA declaratordeclarator : IDdeclarator : ID EQUALS initializerinitializer : NUMBERinitializer : CHAR_LITERALinitializer : STRING_LITERALassign_stmt : ID assign_op expr SEMICOLONassign_op : EQUALS\n| PLUSEQ\n| MINUSEQ\n| TIMESEQ\n| DIVEQexpr : expr PLUS termexpr : expr MINUS termexpr : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : IDfactor : NUMBERfactor : LPAREN expr RPARENcond : expr relop exprrelop : EQ\n| NE\n| LT\n| LE\n| GT\n| GEif_stmt : IF LPAREN cond RPAREN compound_stmt opt_elseopt_else : ELSE compound_stmt\n| emptyswitch_stmt : SWITCH LPAREN ID RPAREN LBRACE case_block_list opt_default RBRACEcase_block_list : case_block case_block_list\n| emptycase_block : case_label_list compound_stmtcase_label_list : CASE ID COLONcase_label_list : CASE ID COLON case_label_listopt_default : DEFAULT COLON compound_stmt\n| emptywhile_stmt : WHILE LPAREN cond RPAREN compound_stmtinitializer_for : ID assign_op expriteration : ID assign_op exprfor_stmt : FOR LPAREN initializer_for SEMICOLON cond SEMICOLON iteration RPAREN compound_stmtcompound_stmt : LBRACE stmt_list RBRACEbreak_stmt : BREAK SEMICOLON'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,19,33,34,54,77,81,84,86,94,95,104,111,],[-4,0,-1,-4,-3,-5,-6,-7,-8,-9,-10,-11,-2,-58,-12,-20,-4,-53,-42,-44,-43,-57,-45,-56,]),'TYPE':([0,3,5,6,7,8,9,10,11,33,34,54,77,78,81,84,86,94,95,104,111,],[12,12,-5,-6,-7,-8,-9,-10,-11,-58,-12,-20,-4,12,-53,-42,-44,-43,-57,-45,-56,]),'ID':([0,3,5,6,7,8,9,10,11,12,23,24,25,26,27,28,29,30,31,32,33,34,35,42,54,55,56,57,58,61,62,63,64,65,66,67,70,71,77,78,81,84,86,92,93,94,95,104,108,111,],[13,13,-5,-6,-7,-8,-9,-10,-11,22,37,-21,-22,-23,-24,-25,37,45,37,48,-58,-12,22,37,-20,37,37,37,37,37,-36,-37,-38,-39,-40,-41,37,37,-4,13,-53,-42,-44,101,103,-43,-57,-45,37,-56,]),'IF':([0,3,5,6,7,8,9,10,11,33,34,54,77,78,81,84,86,94,95,104,111,],[14,14,-5,-6,-7,-8,-9,-10,-11,-58,-12,-20,-4,14,-53,-42,-44,-43,-57,-45,-56,]),'SWITCH':([0,3,5,6,7,8,9,10,11,33,34,54,77,78,81,84,86,94,95,104,111,],[15,15,-5,-6,-7,-8,-9,-10,-11,-58,-12,-20,-4,15,-53,-42,-44,-43,-57,-45,-56,]),'WHILE':([0,3,5,6,7,8,9,10,11,33,34,54,77,78,81,84,86,94,95,104,111,],[16,16,-5,-6,-7,-8,-9,-10,-11,-58,-12,-20,-4,16,-53,-42,-44,-43,-57,-45,-56,]),'FOR':([0,3,5,6,7,8,9,10,11,33,34,54,77,78,81,84,86,94,95,104,111,],[17,17,-5,-6,-7,-8,-9,-10,-11,-58,-12,-20,-4,17,-53,-42,-44,-43,-57,-45,-56,]),'BREAK':([0,3,5,6,7,8,9,10,11,33,34,54,77,78,81,84,86,94,95,104,111,],[18,18,-5,-6,-7,-8,-9,-10,-11,-58,-12,-20,-4,18,-53,-42,-44,-43,-57,-45,-56,]),'RBRACE':([3,4,5,6,7,8,9,10,11,19,33,34,54,77,78,80,81,84,86,87,88,89,90,94,95,96,98,99,100,104,109,111,],[-4,-3,-5,-6,-7,-8,-9,-10,-11,-2,-58,-12,-20,-4,-4,-4,-53,-42,-44,95,-4,-4,-47,-43,-57,104,-52,-46,-48,-45,-51,-56,]),'EQUALS':([13,22,48,103,],[24,36,24,24,]),'PLUSEQ':([13,48,103,],[25,25,25,]),'MINUSEQ':([13,48,103,],[26,26,26,]),'TIMESEQ':([13,48,103,],[27,27,27,]),'DIVEQ':([13,48,103,],[28,28,28,]),'LPAREN':([14,15,16,17,23,24,25,26,27,28,29,31,42,55,56,57,58,61,62,63,64,65,66,67,70,71,108,],[29,30,31,32,42,-21,-22,-23,-24,-25,42,42,42,42,42,42,42,42,-36,-37,-38,-39,-40,-41,42,42,42,]),'SEMICOLON':([18,20,21,22,37,38,39,40,41,47,49,50,51,52,53,72,73,74,75,76,79,82,83,],[33,34,-13,-15,-32,54,-28,-31,-33,70,-14,-16,-17,-18,-19,-26,-27,-29,-30,-34,-35,93,-54,]),'COMMA':([20,21,22,49,50,51,52,53,],[35,-13,-15,-14,-16,-17,-18,-19,]),'NUMBER':([23,24,25,26,27,28,29,31,36,42,55,56,57,58,61,62,63,64,65,66,67,70,71,108,],[41,-21,-22,-23,-24,-25,41,41,51,41,41,41,41,41,41,-36,-37,-38,-39,-40,-41,41,41,41,]),'CHAR_LITERAL':([36,],[52,]),'STRING_LITERAL':([36,],[53,]),'TIMES':([37,39,40,41,72,73,74,75,76,],[-32,57,-31,-33,57,57,-29,-30,-34,]),'DIVIDE':([37,39,40,41,72,73,74,75,76,],[-32,58,-31,-33,58,58,-29,-30,-34,]),'PLUS':([37,38,39,40,41,44,59,72,73,74,75,76,79,83,112,],[-32,55,-28,-31,-33,55,55,-26,-27,-29,-30,-34,55,55,55,]),'MINUS':([37,38,39,40,41,44,59,72,73,74,75,76,79,83,112,],[-32,56,-28,-31,-33,56,56,-26,-27,-29,-30,-34,56,56,56,]),'EQ':([37,39,40,41,44,72,73,74,75,76,],[-32,-28,-31,-33,62,-26,-27,-29,-30,-34,]),'NE':([37,39,40,41,44,72,73,74,75,76,],[-32,-28,-31,-33,63,-26,-27,-29,-30,-34,]),'LT':([37,39,40,41,44,72,73,74,75,76,],[-32,-28,-31,-33,64,-26,-27,-29,-30,-34,]),'LE':([37,39,40,41,44,72,73,74,75,76,],[-32,-28,-31,-33,65,-26,-27,-29,-30,-34,]),'GT':([37,39,40,41,44,72,73,74,75,76,],[-32,-28,-31,-33,66,-26,-27,-29,-30,-34,]),'GE':([37,39,40,41,44,72,73,74,75,76,],[-32,-28,-31,-33,67,-26,-27,-29,-30,-34,]),'RPAREN':([37,39,40,41,43,45,46,59,72,73,74,75,76,79,102,112,],[-32,-28,-31,-33,60,68,69,76,-26,-27,-29,-30,-34,-35,107,-55,]),'LBRACE':([60,68,69,85,91,105,106,107,110,],[78,80,78,78,78,78,-49,78,-50,]),'ELSE':([77,95,],[85,-57,]),'DEFAULT':([80,88,89,90,95,99,100,],[-4,97,-4,-47,-57,-46,-48,]),'CASE':([80,89,95,100,106,],[92,92,-57,-48,92,]),'COLON':([97,101,],[105,106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,78,],[2,19,87,]),'stmt':([0,3,78,],[3,3,3,]),'empty':([0,3,77,78,80,88,89,],[4,4,86,4,90,98,90,]),'var_decl':([0,3,78,],[5,5,5,]),'assign_stmt':([0,3,78,],[6,6,6,]),'if_stmt':([0,3,78,],[7,7,7,]),'switch_stmt':([0,3,78,],[8,8,8,]),'while_stmt':([0,3,78,],[9,9,9,]),'for_stmt':([0,3,78,],[10,10,10,]),'break_stmt':([0,3,78,],[11,11,11,]),'declarator_list':([12,],[20,]),'declarator':([12,35,],[21,49,]),'assign_op':([13,48,103,],[23,71,108,]),'expr':([23,29,31,42,61,70,71,108,],[38,44,44,59,79,44,83,112,]),'term':([23,29,31,42,55,56,61,70,71,108,],[39,39,39,39,72,73,39,39,39,39,]),'factor':([23,29,31,42,55,56,57,58,61,70,71,108,],[40,40,40,40,40,40,74,75,40,40,40,40,]),'cond':([29,31,70,],[43,46,82,]),'initializer_for':([32,],[47,]),'initializer':([36,],[50,]),'relop':([44,],[61,]),'compound_stmt':([60,69,85,91,105,107,],[77,81,94,100,109,111,]),'opt_else':([77,],[84,]),'case_block_list':([80,89,],[88,99,]),'case_block':([80,89,],[89,89,]),'case_label_list':([80,89,106,],[91,91,110,]),'opt_default':([88,],[96,]),'iteration':([93,],[102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','analisador_c_.py',114),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','analisador_c_.py',118),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list_empty','analisador_c_.py',122),
  ('empty -> <empty>','empty',0,'p_empty','analisador_c_.py',126),
  ('stmt -> var_decl','stmt',1,'p_stmt','analisador_c_.py',132),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','analisador_c_.py',133),
  ('stmt -> if_stmt','stmt',1,'p_stmt','analisador_c_.py',134),
  ('stmt -> switch_stmt','stmt',1,'p_stmt','analisador_c_.py',135),
  ('stmt -> while_stmt','stmt',1,'p_stmt','analisador_c_.py',136),
  ('stmt -> for_stmt','stmt',1,'p_stmt','analisador_c_.py',137),
  ('stmt -> break_stmt','stmt',1,'p_stmt','analisador_c_.py',138),
  ('var_decl -> TYPE declarator_list SEMICOLON','var_decl',3,'p_var_decl','analisador_c_.py',144),
  ('declarator_list -> declarator','declarator_list',1,'p_declarator_list_single','analisador_c_.py',148),
  ('declarator_list -> declarator_list COMMA declarator','declarator_list',3,'p_declarator_list_multi','analisador_c_.py',152),
  ('declarator -> ID','declarator',1,'p_declarator_no_init','analisador_c_.py',156),
  ('declarator -> ID EQUALS initializer','declarator',3,'p_declarator_init','analisador_c_.py',160),
  ('initializer -> NUMBER','initializer',1,'p_initializer_number','analisador_c_.py',164),
  ('initializer -> CHAR_LITERAL','initializer',1,'p_initializer_char','analisador_c_.py',168),
  ('initializer -> STRING_LITERAL','initializer',1,'p_initializer_string','analisador_c_.py',172),
  ('assign_stmt -> ID assign_op expr SEMICOLON','assign_stmt',4,'p_assign_stmt','analisador_c_.py',178),
  ('assign_op -> EQUALS','assign_op',1,'p_assign_op','analisador_c_.py',182),
  ('assign_op -> PLUSEQ','assign_op',1,'p_assign_op','analisador_c_.py',183),
  ('assign_op -> MINUSEQ','assign_op',1,'p_assign_op','analisador_c_.py',184),
  ('assign_op -> TIMESEQ','assign_op',1,'p_assign_op','analisador_c_.py',185),
  ('assign_op -> DIVEQ','assign_op',1,'p_assign_op','analisador_c_.py',186),
  ('expr -> expr PLUS term','expr',3,'p_expr_plus','analisador_c_.py',192),
  ('expr -> expr MINUS term','expr',3,'p_expr_minus','analisador_c_.py',196),
  ('expr -> term','expr',1,'p_expr_term','analisador_c_.py',200),
  ('term -> term TIMES factor','term',3,'p_term_times','analisador_c_.py',204),
  ('term -> term DIVIDE factor','term',3,'p_term_div','analisador_c_.py',208),
  ('term -> factor','term',1,'p_term_factor','analisador_c_.py',212),
  ('factor -> ID','factor',1,'p_factor_id','analisador_c_.py',216),
  ('factor -> NUMBER','factor',1,'p_factor_num','analisador_c_.py',220),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor_paren','analisador_c_.py',224),
  ('cond -> expr relop expr','cond',3,'p_cond','analisador_c_.py',230),
  ('relop -> EQ','relop',1,'p_relop','analisador_c_.py',234),
  ('relop -> NE','relop',1,'p_relop','analisador_c_.py',235),
  ('relop -> LT','relop',1,'p_relop','analisador_c_.py',236),
  ('relop -> LE','relop',1,'p_relop','analisador_c_.py',237),
  ('relop -> GT','relop',1,'p_relop','analisador_c_.py',238),
  ('relop -> GE','relop',1,'p_relop','analisador_c_.py',239),
  ('if_stmt -> IF LPAREN cond RPAREN compound_stmt opt_else','if_stmt',6,'p_if_stmt','analisador_c_.py',245),
  ('opt_else -> ELSE compound_stmt','opt_else',2,'p_opt_else','analisador_c_.py',249),
  ('opt_else -> empty','opt_else',1,'p_opt_else','analisador_c_.py',250),
  ('switch_stmt -> SWITCH LPAREN ID RPAREN LBRACE case_block_list opt_default RBRACE','switch_stmt',8,'p_switch_stmt','analisador_c_.py',256),
  ('case_block_list -> case_block case_block_list','case_block_list',2,'p_case_block_list','analisador_c_.py',260),
  ('case_block_list -> empty','case_block_list',1,'p_case_block_list','analisador_c_.py',261),
  ('case_block -> case_label_list compound_stmt','case_block',2,'p_case_block','analisador_c_.py',265),
  ('case_label_list -> CASE ID COLON','case_label_list',3,'p_case_label_list_single','analisador_c_.py',269),
  ('case_label_list -> CASE ID COLON case_label_list','case_label_list',4,'p_case_label_list_multi','analisador_c_.py',273),
  ('opt_default -> DEFAULT COLON compound_stmt','opt_default',3,'p_opt_default','analisador_c_.py',277),
  ('opt_default -> empty','opt_default',1,'p_opt_default','analisador_c_.py',278),
  ('while_stmt -> WHILE LPAREN cond RPAREN compound_stmt','while_stmt',5,'p_while_stmt','analisador_c_.py',284),
  ('initializer_for -> ID assign_op expr','initializer_for',3,'p_initializer_for','analisador_c_.py',290),
  ('iteration -> ID assign_op expr','iteration',3,'p_iteration','analisador_c_.py',294),
  ('for_stmt -> FOR LPAREN initializer_for SEMICOLON cond SEMICOLON iteration RPAREN compound_stmt','for_stmt',9,'p_for_stmt','analisador_c_.py',298),
  ('compound_stmt -> LBRACE stmt_list RBRACE','compound_stmt',3,'p_compound_stmt','analisador_c_.py',304),
  ('break_stmt -> BREAK SEMICOLON','break_stmt',2,'p_break_stmt','analisador_c_.py',310),
]
